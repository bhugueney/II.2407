#+TITLE: Named Pipes

#+PROPERTY: header-args:sh :prologue exec 2>&1 :epilogue :

See PIPE_BUF http://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html 

#+BEGIN_SRC elisp :exports none :results none
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t) (shell . t) (lisp . t)))

(require 'org-latex)
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
     '(("frame" "lines") ("linenos=true")))
(setq org-latex-to-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode %s"
        "pdflatex -shell-escape -interaction nonstopmode %s"
        "pdflatex -shell-escape -interaction nonstopmode %s"))
(setq org-babel-shell-names '("bash")) 
#+END_SRC


* Timing
** Reading a time and timing the difference with current time
Actually computing statistics (min, max, avg) on the timed difference.
#+BEGIN_SRC c :tangle read-time-chrono.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <sys/time.h>
  #include <errno.h>

  int main(int argc, char* argv[]){
    FILE * fd= argc >1 ? fopen(argv[1], "r") : stdin;
    size_t n_to_read= argc >2 ? atoi(argv[2])*1024/sizeof(struct timeval) : 1;
    struct timeval * start= malloc(n_to_read*sizeof(struct timeval));
    struct timeval stop;
    size_t min= (size_t)-1, sum=0, max= 0, n=0; // size_t is unsigned, so max avlue is -1
    while(fread(start, sizeof(struct timeval), n_to_read, fd)== n_to_read){
      gettimeofday(&stop, NULL);
      size_t d= (stop.tv_sec - start[0].tv_sec)*1000000 + (stop.tv_usec - start[0].tv_usec);
      if (d < min){ min= d; }
      if (d > max) { max= d; }
      sum+= d;
      ++n;
      fprintf(stderr, "%ld\t%ld\t%ld\n", min, max, sum/n);
    }
    fclose(fd);
    return 0;
  }
#+END_SRC

** Writing a time

#+BEGIN_SRC c :tangle write-time.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <sys/time.h>

  int main(int argc, char* argv[]){
    FILE* fd= argc >1 ? fopen(argv[1], "a") : stdout;
    size_t n_to_write= argc >2 ? atoi(argv[2])*1024/sizeof(struct timeval) : 1;
    //setbuf(fd, NULL);
    struct timeval *tv= malloc(n_to_write*sizeof(struct timeval));
    while(1){
      gettimeofday(tv, NULL);
      fwrite(tv, sizeof(struct timeval), n_to_write, fd);
      fflush(fd);
      usleep(1000);
    }
    return 0;
  }
#+END_SRC
* Creating a named pipe
#+BEGIN_SRC c :tangle my-mkfifo.c
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <stdio.h>
  #include <stdlib.h>// for strtol, atoi is decimal which is unhelpful for octal modes
  #include <errno.h>

  int main(int argc, char* argv[]){
    if( argc <2){ fprintf(stderr, "Usage: %s pipe_name [creation mode in octal as permitted by umask]\n", argv[0]);}
    return mkfifo(argv[1], argc > 2 ? strtol(argv[2], NULL, 8) : (S_IRUSR | S_IWUSR)) ? errno : 0;
  }

#+END_SRC

* Usage
#+BEGIN_SRC shell
for src in my-mkfifo.c write-time.c read-time-chrono.c ; do gcc $src -o ${src/.c/} -Wall; done
#+END_SRC

#+RESULTS:

#+BEGIN_SRC shell
(timeout 20  ./write-time |./read-time-chrono 2>&1 ) |tail -n 1 
#+END_SRC

#+RESULTS:
| 3 | 5733 | 25 |

#+BEGIN_SRC shell
./my-mkfifo testFifo
#+END_SRC

#+BEGIN_SRC shell
timeout 20  ./write-time testFifo&
./read-time-chrono testFifo 2>&1  |tail -n 1 
#+END_SRC

#+RESULTS:
| 3 | 130 | 23 |

#+BEGIN_SRC shell
timeout 20  ./write-time >testFifo&
./read-time-chrono testFifo 2>&1  |tail -n 1 
#+END_SRC

#+RESULTS:
| 3 | 145 | 24 |

#+BEGIN_SRC shell
timeout 20  ./write-time testFifo&
./read-time-chrono <testFifo 2>&1  |tail -n 1 
#+END_SRC

#+RESULTS:
| 3 | 2420 | 25 |

#+BEGIN_SRC shell
timeout 20  ./write-time >testFifo&
./read-time-chrono <testFifo 2>&1  |tail -n 1 
#+END_SRC

#+RESULTS:
| 2 | 1389 | 26 |


Executer dans deux shells
#+BEGIN_SRC shell 
nc -l 5555 > testFifo &
./read-time-chrono testFifo 2>&1  |tail -n 1 
#+END_SRC


#+BEGIN_SRC shell 
timeout 20  ./write-time | nc localhost 5555 &
#+END_SRC


#+RESULTS:
| 19 | 443  | 62 |

